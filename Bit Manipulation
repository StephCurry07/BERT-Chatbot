/**
 * Optimized Bit Manipulation (With Early Exit)
 *
 * Number of bits in Int.MAX = log(Int.MAX) = 31 bits
 * Number of bits in sqrt(Int.MAX) = log(sqrt(Int.MAX)) = 16 bits.
 *
 * Thus we need to create a mask with 16 bits, where the 15th bit is set to 1 & rest are set to zero.
 *
 * In this solution we are setting each bit and checking if the result*(result+1)/2 is less than N,
 * else we do not set the bit in the result.
 *
 * Time Complexity: O(16) = O(1)
 *
 * Space Complexity: O(1)
 *
 * N = Input number.
 */
class Solution {
    public int arrangeCoins(int n) {
        if (n < 0) {
            throw new IllegalArgumentException("Input Number is invalid. Only positive numbers are allowed");
        }

        int mask = 1 << 15;
        long result = 0;

        while (mask > 0) {
            long temp = result | mask;
            long coinsFilled = temp * (temp + 1) / 2;
            if (coinsFilled == n) {
                return (int) temp;
            }
            if (coinsFilled < n) {
                result = temp;
            }
            mask >>= 1;
        }

        return (int) result;
    }
}
